{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNqpn2pZ9yrxkkG4M34s6XF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Rushi1820/Bitcoin_predictor/blob/main/bitcoin_predictor\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "vbFmC9bSH7ga",
        "outputId": "bb00bf69-8570-4003-dc61-b680826af2d7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Date     Price\n",
              "0  07-02-2021 00:00  39323.26\n",
              "1  08-02-2021 00:00  38928.10\n",
              "2  09-02-2021 00:00  46364.30\n",
              "3  10-02-2021 00:00  46589.58\n",
              "4  11-02-2021 00:00  44878.17"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8f0c5d21-852e-4a96-8912-afdc6e4b04c7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>07-02-2021 00:00</td>\n",
              "      <td>39323.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>08-02-2021 00:00</td>\n",
              "      <td>38928.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>09-02-2021 00:00</td>\n",
              "      <td>46364.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10-02-2021 00:00</td>\n",
              "      <td>46589.58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>11-02-2021 00:00</td>\n",
              "      <td>44878.17</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f0c5d21-852e-4a96-8912-afdc6e4b04c7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8f0c5d21-852e-4a96-8912-afdc6e4b04c7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8f0c5d21-852e-4a96-8912-afdc6e4b04c7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "#reading bitcoin csv file using read function\n",
        "dt=pd.read_csv(\"bitcoin.csv\") \n",
        "dt.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#NOW WE PERFORM DATA PREPROCESSING\n",
        "dt.drop([\"Date\"],1,inplace=True)\n",
        "#here we are dropping the date column for reducing the data as date column is not required for us"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vE958r8iImLM",
        "outputId": "f71294c9-d65b-4450-ce8a-2747228f8c82"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
            "  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "days=30\n",
        "dt[\"Predicted\"]=dt.shift(-1*days)\n",
        "dt.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "8t6EEcvCIqQ-",
        "outputId": "a2b28b89-65ce-4604-d9c0-f0ec32542f4e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Price  Predicted\n",
              "0  39323.26   52299.33\n",
              "1  38928.10   54881.52\n",
              "2  46364.30   55997.23\n",
              "3  46589.58   57764.00\n",
              "4  44878.17   57253.28"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e6f6ab13-5e99-4608-a4c5-dac710526a38\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Predicted</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>39323.26</td>\n",
              "      <td>52299.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>38928.10</td>\n",
              "      <td>54881.52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46364.30</td>\n",
              "      <td>55997.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>46589.58</td>\n",
              "      <td>57764.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>44878.17</td>\n",
              "      <td>57253.28</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6f6ab13-5e99-4608-a4c5-dac710526a38')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e6f6ab13-5e99-4608-a4c5-dac710526a38 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e6f6ab13-5e99-4608-a4c5-dac710526a38');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#nOW checking the last 30 days coumns which should be null\n",
        "dt.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "I3LkE6obIuIN",
        "outputId": "96ebd1f2-bb48-4dbc-80ab-dae74552be8a"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Price  Predicted\n",
              "361  36912.68        NaN\n",
              "362  37092.40        NaN\n",
              "363  41584.19        NaN\n",
              "364  41435.43        NaN\n",
              "365  42450.98        NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-39bd30c1-6b81-41ac-ae7b-c8007947c5d2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Predicted</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>361</th>\n",
              "      <td>36912.68</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362</th>\n",
              "      <td>37092.40</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363</th>\n",
              "      <td>41584.19</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>364</th>\n",
              "      <td>41435.43</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>365</th>\n",
              "      <td>42450.98</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39bd30c1-6b81-41ac-ae7b-c8007947c5d2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-39bd30c1-6b81-41ac-ae7b-c8007947c5d2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-39bd30c1-6b81-41ac-ae7b-c8007947c5d2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#DATA PREDICTION\n",
        "r=np.array(dt.drop([\"Predicted\"],1))\n",
        "r=r[:len(dt)-days]\n",
        "print(r)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q2JmEIP3Ixjs",
        "outputId": "3b7f77bc-6610-45cd-c609-be8aeaef6f1a"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[39323.26]\n",
            " [38928.1 ]\n",
            " [46364.3 ]\n",
            " [46589.58]\n",
            " [44878.17]\n",
            " [48013.38]\n",
            " [47471.4 ]\n",
            " [47185.19]\n",
            " [48720.37]\n",
            " [47951.85]\n",
            " [49160.1 ]\n",
            " [52118.23]\n",
            " [51608.15]\n",
            " [55916.5 ]\n",
            " [56001.2 ]\n",
            " [57487.86]\n",
            " [54123.4 ]\n",
            " [48880.43]\n",
            " [50624.84]\n",
            " [46800.42]\n",
            " [46340.31]\n",
            " [46155.87]\n",
            " [45113.92]\n",
            " [49618.43]\n",
            " [48356.04]\n",
            " [50477.7 ]\n",
            " [48448.91]\n",
            " [48861.38]\n",
            " [48881.59]\n",
            " [51169.7 ]\n",
            " [52299.33]\n",
            " [54881.52]\n",
            " [55997.23]\n",
            " [57764.  ]\n",
            " [57253.28]\n",
            " [61258.73]\n",
            " [59133.47]\n",
            " [55754.72]\n",
            " [56872.38]\n",
            " [58913.  ]\n",
            " [57665.9 ]\n",
            " [58075.1 ]\n",
            " [58085.8 ]\n",
            " [57411.17]\n",
            " [54204.96]\n",
            " [54477.46]\n",
            " [52508.23]\n",
            " [51415.92]\n",
            " [55074.47]\n",
            " [55863.93]\n",
            " [55783.71]\n",
            " [57627.67]\n",
            " [58730.13]\n",
            " [58735.25]\n",
            " [58736.92]\n",
            " [59031.32]\n",
            " [57076.49]\n",
            " [58206.55]\n",
            " [59054.1 ]\n",
            " [58020.46]\n",
            " [55947.27]\n",
            " [58048.59]\n",
            " [58102.58]\n",
            " [59774.  ]\n",
            " [59964.87]\n",
            " [59834.74]\n",
            " [63554.44]\n",
            " [62969.12]\n",
            " [63252.63]\n",
            " [61455.98]\n",
            " [60087.09]\n",
            " [56251.48]\n",
            " [55703.14]\n",
            " [56507.91]\n",
            " [53808.8 ]\n",
            " [51731.71]\n",
            " [51153.13]\n",
            " [50110.53]\n",
            " [49075.58]\n",
            " [54056.64]\n",
            " [55071.46]\n",
            " [54884.1 ]\n",
            " [53584.15]\n",
            " [57796.62]\n",
            " [57857.5 ]\n",
            " [56610.46]\n",
            " [57213.33]\n",
            " [53241.72]\n",
            " [57473.23]\n",
            " [56428.16]\n",
            " [57380.27]\n",
            " [58928.81]\n",
            " [58280.73]\n",
            " [55883.5 ]\n",
            " [56750.  ]\n",
            " [49007.09]\n",
            " [49702.27]\n",
            " [49922.52]\n",
            " [46736.58]\n",
            " [46441.64]\n",
            " [43596.24]\n",
            " [42912.19]\n",
            " [36964.27]\n",
            " [40784.32]\n",
            " [37280.35]\n",
            " [37528.3 ]\n",
            " [34754.54]\n",
            " [38728.59]\n",
            " [38410.5 ]\n",
            " [39266.04]\n",
            " [38445.29]\n",
            " [35689.62]\n",
            " [34647.67]\n",
            " [35684.59]\n",
            " [37310.54]\n",
            " [36662.64]\n",
            " [37585.24]\n",
            " [39188.59]\n",
            " [36885.51]\n",
            " [35530.38]\n",
            " [35816.17]\n",
            " [33514.87]\n",
            " [33450.19]\n",
            " [37338.36]\n",
            " [36704.57]\n",
            " [37313.18]\n",
            " [35494.9 ]\n",
            " [39066.82]\n",
            " [40525.8 ]\n",
            " [40188.56]\n",
            " [38324.87]\n",
            " [38068.04]\n",
            " [35729.82]\n",
            " [35524.17]\n",
            " [35592.35]\n",
            " [31686.55]\n",
            " [32447.59]\n",
            " [33674.66]\n",
            " [34639.38]\n",
            " [31640.58]\n",
            " [32160.91]\n",
            " [34644.45]\n",
            " [34456.67]\n",
            " [35847.7 ]\n",
            " [35047.36]\n",
            " [33536.88]\n",
            " [33856.86]\n",
            " [34688.98]\n",
            " [35309.3 ]\n",
            " [33747.97]\n",
            " [34211.01]\n",
            " [33839.04]\n",
            " [32877.41]\n",
            " [33818.52]\n",
            " [33515.57]\n",
            " [34227.64]\n",
            " [33158.25]\n",
            " [32686.56]\n",
            " [32814.61]\n",
            " [31738.59]\n",
            " [31421.25]\n",
            " [31520.66]\n",
            " [31783.49]\n",
            " [30815.94]\n",
            " [29790.24]\n",
            " [32118.06]\n",
            " [32297.89]\n",
            " [33581.63]\n",
            " [34279.34]\n",
            " [35365.2 ]\n",
            " [37318.14]\n",
            " [39405.95]\n",
            " [40002.53]\n",
            " [40005.93]\n",
            " [42214.15]\n",
            " [41659.06]\n",
            " [40000.46]\n",
            " [39193.94]\n",
            " [38138.  ]\n",
            " [39750.14]\n",
            " [40882.  ]\n",
            " [42825.95]\n",
            " [44634.13]\n",
            " [43816.14]\n",
            " [46333.46]\n",
            " [45608.37]\n",
            " [45611.46]\n",
            " [44417.78]\n",
            " [47833.98]\n",
            " [47112.19]\n",
            " [47056.41]\n",
            " [45982.55]\n",
            " [44648.57]\n",
            " [44777.86]\n",
            " [46734.65]\n",
            " [49327.75]\n",
            " [48932.02]\n",
            " [49335.68]\n",
            " [49523.5 ]\n",
            " [47744.58]\n",
            " [48972.09]\n",
            " [46962.8 ]\n",
            " [49056.86]\n",
            " [48897.65]\n",
            " [48806.78]\n",
            " [47074.77]\n",
            " [47155.87]\n",
            " [48862.76]\n",
            " [49329.01]\n",
            " [50035.33]\n",
            " [49947.38]\n",
            " [51769.06]\n",
            " [52677.4 ]\n",
            " [46809.17]\n",
            " [46078.38]\n",
            " [46368.69]\n",
            " [44847.48]\n",
            " [45144.79]\n",
            " [46059.12]\n",
            " [44968.76]\n",
            " [47072.12]\n",
            " [48167.85]\n",
            " [47785.26]\n",
            " [47263.6 ]\n",
            " [48259.45]\n",
            " [47249.38]\n",
            " [42901.56]\n",
            " [40619.27]\n",
            " [43604.76]\n",
            " [44888.96]\n",
            " [42815.56]\n",
            " [42742.01]\n",
            " [43182.63]\n",
            " [42238.2 ]\n",
            " [41011.16]\n",
            " [41522.38]\n",
            " [43757.81]\n",
            " [48140.11]\n",
            " [47727.1 ]\n",
            " [48205.72]\n",
            " [49143.95]\n",
            " [51505.83]\n",
            " [55343.76]\n",
            " [53801.1 ]\n",
            " [53867.3 ]\n",
            " [55122.59]\n",
            " [54625.74]\n",
            " [57452.01]\n",
            " [56242.94]\n",
            " [57406.69]\n",
            " [57397.74]\n",
            " [61641.17]\n",
            " [60948.78]\n",
            " [61546.21]\n",
            " [61971.59]\n",
            " [64287.64]\n",
            " [66063.56]\n",
            " [62354.86]\n",
            " [60697.06]\n",
            " [61277.28]\n",
            " [60884.18]\n",
            " [63070.54]\n",
            " [60345.17]\n",
            " [58538.49]\n",
            " [60587.09]\n",
            " [62249.18]\n",
            " [61731.29]\n",
            " [61373.44]\n",
            " [61029.5 ]\n",
            " [63241.11]\n",
            " [62954.86]\n",
            " [61441.83]\n",
            " [61072.32]\n",
            " [61516.31]\n",
            " [63293.22]\n",
            " [67562.17]\n",
            " [66954.11]\n",
            " [64976.73]\n",
            " [64838.81]\n",
            " [64254.67]\n",
            " [64420.94]\n",
            " [65468.75]\n",
            " [63584.25]\n",
            " [60172.26]\n",
            " [60381.35]\n",
            " [56921.34]\n",
            " [58133.02]\n",
            " [59777.98]\n",
            " [58755.9 ]\n",
            " [56301.52]\n",
            " [57578.22]\n",
            " [57187.54]\n",
            " [58935.45]\n",
            " [53588.21]\n",
            " [54801.15]\n",
            " [57292.28]\n",
            " [57828.45]\n",
            " [57025.79]\n",
            " [57229.76]\n",
            " [56508.48]\n",
            " [53713.84]\n",
            " [49253.86]\n",
            " [49380.43]\n",
            " [50564.63]\n",
            " [50645.41]\n",
            " [50511.12]\n",
            " [47659.68]\n",
            " [47137.46]\n",
            " [49379.67]\n",
            " [50117.25]\n",
            " [46757.09]\n",
            " [48392.79]\n",
            " [48884.66]\n",
            " [47658.38]\n",
            " [46173.51]\n",
            " [46863.67]\n",
            " [46689.28]\n",
            " [46910.13]\n",
            " [48934.57]\n",
            " [48628.35]\n",
            " [50785.69]\n",
            " [50814.92]\n",
            " [50470.89]\n",
            " [50801.11]\n",
            " [50692.3 ]\n",
            " [47601.26]\n",
            " [46408.87]\n",
            " [47132.96]\n",
            " [46249.56]\n",
            " [47763.33]\n",
            " [47327.87]\n",
            " [46441.99]\n",
            " [45862.98]\n",
            " [43436.17]\n",
            " [43120.63]\n",
            " [41528.04]]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
            "  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s=np.array(dt[\"Predicted\"])\n",
        "s=s[:-days]\n",
        "print(s)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gPYUgLEzI7ZN",
        "outputId": "3aeb02e5-fc3c-4e5b-ba44-98af76d656e4"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[52299.33 54881.52 55997.23 57764.   57253.28 61258.73 59133.47 55754.72\n",
            " 56872.38 58913.   57665.9  58075.1  58085.8  57411.17 54204.96 54477.46\n",
            " 52508.23 51415.92 55074.47 55863.93 55783.71 57627.67 58730.13 58735.25\n",
            " 58736.92 59031.32 57076.49 58206.55 59054.1  58020.46 55947.27 58048.59\n",
            " 58102.58 59774.   59964.87 59834.74 63554.44 62969.12 63252.63 61455.98\n",
            " 60087.09 56251.48 55703.14 56507.91 53808.8  51731.71 51153.13 50110.53\n",
            " 49075.58 54056.64 55071.46 54884.1  53584.15 57796.62 57857.5  56610.46\n",
            " 57213.33 53241.72 57473.23 56428.16 57380.27 58928.81 58280.73 55883.5\n",
            " 56750.   49007.09 49702.27 49922.52 46736.58 46441.64 43596.24 42912.19\n",
            " 36964.27 40784.32 37280.35 37528.3  34754.54 38728.59 38410.5  39266.04\n",
            " 38445.29 35689.62 34647.67 35684.59 37310.54 36662.64 37585.24 39188.59\n",
            " 36885.51 35530.38 35816.17 33514.87 33450.19 37338.36 36704.57 37313.18\n",
            " 35494.9  39066.82 40525.8  40188.56 38324.87 38068.04 35729.82 35524.17\n",
            " 35592.35 31686.55 32447.59 33674.66 34639.38 31640.58 32160.91 34644.45\n",
            " 34456.67 35847.7  35047.36 33536.88 33856.86 34688.98 35309.3  33747.97\n",
            " 34211.01 33839.04 32877.41 33818.52 33515.57 34227.64 33158.25 32686.56\n",
            " 32814.61 31738.59 31421.25 31520.66 31783.49 30815.94 29790.24 32118.06\n",
            " 32297.89 33581.63 34279.34 35365.2  37318.14 39405.95 40002.53 40005.93\n",
            " 42214.15 41659.06 40000.46 39193.94 38138.   39750.14 40882.   42825.95\n",
            " 44634.13 43816.14 46333.46 45608.37 45611.46 44417.78 47833.98 47112.19\n",
            " 47056.41 45982.55 44648.57 44777.86 46734.65 49327.75 48932.02 49335.68\n",
            " 49523.5  47744.58 48972.09 46962.8  49056.86 48897.65 48806.78 47074.77\n",
            " 47155.87 48862.76 49329.01 50035.33 49947.38 51769.06 52677.4  46809.17\n",
            " 46078.38 46368.69 44847.48 45144.79 46059.12 44968.76 47072.12 48167.85\n",
            " 47785.26 47263.6  48259.45 47249.38 42901.56 40619.27 43604.76 44888.96\n",
            " 42815.56 42742.01 43182.63 42238.2  41011.16 41522.38 43757.81 48140.11\n",
            " 47727.1  48205.72 49143.95 51505.83 55343.76 53801.1  53867.3  55122.59\n",
            " 54625.74 57452.01 56242.94 57406.69 57397.74 61641.17 60948.78 61546.21\n",
            " 61971.59 64287.64 66063.56 62354.86 60697.06 61277.28 60884.18 63070.54\n",
            " 60345.17 58538.49 60587.09 62249.18 61731.29 61373.44 61029.5  63241.11\n",
            " 62954.86 61441.83 61072.32 61516.31 63293.22 67562.17 66954.11 64976.73\n",
            " 64838.81 64254.67 64420.94 65468.75 63584.25 60172.26 60381.35 56921.34\n",
            " 58133.02 59777.98 58755.9  56301.52 57578.22 57187.54 58935.45 53588.21\n",
            " 54801.15 57292.28 57828.45 57025.79 57229.76 56508.48 53713.84 49253.86\n",
            " 49380.43 50564.63 50645.41 50511.12 47659.68 47137.46 49379.67 50117.25\n",
            " 46757.09 48392.79 48884.66 47658.38 46173.51 46863.67 46689.28 46910.13\n",
            " 48934.57 48628.35 50785.69 50814.92 50470.89 50801.11 50692.3  47601.26\n",
            " 46408.87 47132.96 46249.56 47763.33 47327.87 46441.99 45862.98 43436.17\n",
            " 43120.63 41528.04 41690.93 41864.44 41849.   42723.37 43926.   42546.44\n",
            " 43099.37 43146.53 43102.44 42248.35 42381.48 41707.85 40684.42 36480.85\n",
            " 35071.43 36280.82 36678.82 36948.81 36823.5  37146.85 37770.15 38186.49\n",
            " 37918.62 38521.79 38739.74 36912.68 37092.4  41584.19 41435.43 42450.98]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#by using sklearn data will be splitting into train data adn test data\n",
        "from sklearn.model_selection import train_test_split\n",
        "r_train,r_test,s_train,s_test=train_test_split(r,s,test_size=0.2)\n",
        "prediction_r_array=np.array(dt.drop([\"Predicted\"],1))\n",
        "prediction_r_array=prediction_r_array[-days:]\n",
        "#using support vector regression for predction of bitcoin\n",
        "from sklearn.svm import SVR\n",
        "rvt=SVR(kernel= 'rbf', C = 1e3,gamma = 0.00001)\n",
        "rvt.fit(r_train,s_train)\n",
        "rvt.score(r_test,s_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4BVYGv5mI0Ua",
        "outputId": "fd68b0c2-c966-4cf7-edfc-70094310cff7"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
            "  after removing the cwd from sys.path.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.08308083228780727"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predicted_price=rvt.predict(prediction_r_array)\n",
        "\n",
        "#prediction of last 30 days\n",
        "r_price = np.array(dt[\"Price\"])[-days:]\n",
        "dt= pd.DataFrame({\"Price\":r_price, \"Prediction\":predicted_price})\n",
        "dt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 990
        },
        "id": "S_IDnRH3JNkm",
        "outputId": "dc5367c3-0127-4224-857d-2ff317f33855"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Price    Prediction\n",
              "0   41690.93  47069.711333\n",
              "1   41864.44  47139.580913\n",
              "2   41849.00  47129.400521\n",
              "3   42723.37  48286.637685\n",
              "4   43926.00  46924.919195\n",
              "5   42546.44  48142.767983\n",
              "6   43099.37  46032.162613\n",
              "7   43146.53  45849.724550\n",
              "8   43102.44  46018.318747\n",
              "9   42248.35  47405.323970\n",
              "10  42381.48  47648.543213\n",
              "11  41707.85  47069.955955\n",
              "12  40684.42  46641.218661\n",
              "13  36480.85  45644.929893\n",
              "14  35071.43  44829.559472\n",
              "15  36280.82  46491.078617\n",
              "16  36678.82  44137.914740\n",
              "17  36948.81  43212.750876\n",
              "18  36823.50  43491.092769\n",
              "19  37146.85  42411.076705\n",
              "20  37770.15  45738.201462\n",
              "21  38186.49  46757.369438\n",
              "22  37918.62  46989.284703\n",
              "23  38521.79  45506.013326\n",
              "24  38739.74  46468.971443\n",
              "25  36912.68  43290.603743\n",
              "26  37092.40  42700.625838\n",
              "27  41584.19  47119.828152\n",
              "28  41435.43  47368.666594\n",
              "29  42450.98  47845.502117"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea6b5f10-7f7b-4d98-8121-bc9de2324a40\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41690.93</td>\n",
              "      <td>47069.711333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>41864.44</td>\n",
              "      <td>47139.580913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>41849.00</td>\n",
              "      <td>47129.400521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>42723.37</td>\n",
              "      <td>48286.637685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43926.00</td>\n",
              "      <td>46924.919195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>42546.44</td>\n",
              "      <td>48142.767983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>43099.37</td>\n",
              "      <td>46032.162613</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>43146.53</td>\n",
              "      <td>45849.724550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>43102.44</td>\n",
              "      <td>46018.318747</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>42248.35</td>\n",
              "      <td>47405.323970</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>42381.48</td>\n",
              "      <td>47648.543213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>41707.85</td>\n",
              "      <td>47069.955955</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>40684.42</td>\n",
              "      <td>46641.218661</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>36480.85</td>\n",
              "      <td>45644.929893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>35071.43</td>\n",
              "      <td>44829.559472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>36280.82</td>\n",
              "      <td>46491.078617</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>36678.82</td>\n",
              "      <td>44137.914740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>36948.81</td>\n",
              "      <td>43212.750876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>36823.50</td>\n",
              "      <td>43491.092769</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>37146.85</td>\n",
              "      <td>42411.076705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>37770.15</td>\n",
              "      <td>45738.201462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>38186.49</td>\n",
              "      <td>46757.369438</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>37918.62</td>\n",
              "      <td>46989.284703</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>38521.79</td>\n",
              "      <td>45506.013326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>38739.74</td>\n",
              "      <td>46468.971443</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>36912.68</td>\n",
              "      <td>43290.603743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>37092.40</td>\n",
              "      <td>42700.625838</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>41584.19</td>\n",
              "      <td>47119.828152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>41435.43</td>\n",
              "      <td>47368.666594</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>42450.98</td>\n",
              "      <td>47845.502117</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea6b5f10-7f7b-4d98-8121-bc9de2324a40')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ea6b5f10-7f7b-4d98-8121-bc9de2324a40 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ea6b5f10-7f7b-4d98-8121-bc9de2324a40');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#now creating a user trails\n",
        "p=list(map(float,input(\"enter price\").split()))\n",
        "print(\"predicted price after 30 days:\",end=\" \")\n",
        "q_pred=rvt.predict(np.array(p).reshape(-1,1))\n",
        "print(int(q_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cw8Es0CUJaTE",
        "outputId": "4952a9e8-56b7-4262-e9a8-5dcb5fa5ea8a"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter price42580\n",
            "predicted price after 30 days: 48231\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "9Tvx3kWOJn2I"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}